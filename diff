diff --git a/pom.xml b/pom.xml
index 5b99642..e3ecccd 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,3 +1,4 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
 <!--
 The MIT License
 
@@ -24,16 +25,18 @@ THE SOFTWARE.
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
   <parent>
-    <groupId>org.jenkins-ci.plugins</groupId>
-    <artifactId>plugin</artifactId>
-    <version>1.463</version>
+    <groupId>org.eclipse.hudson.plugins</groupId>
+    <artifactId>hudson-plugin-parent</artifactId>
+    <version>3.0.0</version>
+  <relativePath/>
   </parent>
 
+  <groupId>org.hudsonci.plugins</groupId>
   <artifactId>clone-workspace-scm</artifactId>
   <packaging>hpi</packaging>
-  <name>Jenkins Clone Workspace SCM Plug-in</name>
-  <version>0.5</version>
-  <url>http://wiki.jenkins-ci.org/display/JENKINS/Clone+Workspace+SCM+Plugin</url>
+  <name>Hudson Clone Workspace SCM Plug-in</name>
+  <version>0.5-h-1-SNAPSHOT</version>
+  <url>http://wiki.hudson-ci.org/display/HUDSON/Clone+Workspace+SCM+Plugin</url>
   <description>Plugin to archive workspaces from one project and reuse those as SCM sources for other projects.</description>
   
   <licenses>
@@ -81,24 +84,14 @@ THE SOFTWARE.
     </developer>
   </developers>
 
-  <repositories>
-    <repository>
-      <id>repo.jenkins-ci.org</id>
-      <url>http://repo.jenkins-ci.org/public/</url>
-    </repository>
-  </repositories>
+  
 
-  <distributionManagement>
-    <repository>
-      <id>maven.jenkins-ci.org</id>
-      <url>http://maven.jenkins-ci.org:8081/content/repositories/releases/</url>
-    </repository>
-  </distributionManagement>
+  
 
   <scm>
-    <connection>scm:git:git://github.com/jenkinsci/jenkins-clone-workspace-scm-plugin.git</connection>
-    <developerConnection>scm:git:git@github.com:jenkinsci/jenkins-clone-workspace-scm-plugin.git</developerConnection>
-    <url>http://github.com/jenkinsci/jenkins-clone-workspace-scm-plugin</url>
+    <connection>scm:git:git://github.com/hudson3-plugins/clone-workspace-scm-plugin.git</connection>
+    <developerConnection>scm:git:git@github.com:hudson3-plugins/clone-workspace-scm-plugin.git</developerConnection>
+    <url>https://github.com/hudson3-plugins/clone-workspace-scm-plugin</url>
   </scm>
 
 
@@ -108,5 +101,7 @@ THE SOFTWARE.
             <url>http://repo.jenkins-ci.org/public/</url>
         </pluginRepository>
     </pluginRepositories>
-</project>  
-
+	<properties>
+    	<hudsonTags>scm</hudsonTags>
+  	</properties>
+</project>
diff --git a/src/main/java/hudson/plugins/cloneworkspace/CloneWorkspacePublisher.java b/src/main/java/hudson/plugins/cloneworkspace/CloneWorkspacePublisher.java
index 56bdf7b..668c439 100644
--- a/src/main/java/hudson/plugins/cloneworkspace/CloneWorkspacePublisher.java
+++ b/src/main/java/hudson/plugins/cloneworkspace/CloneWorkspacePublisher.java
@@ -90,14 +90,14 @@ public class CloneWorkspacePublisher extends Recorder {
     /**
      * If true, don't use the Ant default file glob excludes.
      */
-    private final boolean overrideDefaultExcludes;
+    private final boolean overrideDefaultExcludes = false;
     @DataBoundConstructor
-    public CloneWorkspacePublisher(String workspaceGlob, String workspaceExcludeGlob, String criteria, String archiveMethod, boolean overrideDefaultExcludes) {
+    public CloneWorkspacePublisher(String workspaceGlob, String workspaceExcludeGlob, String criteria, String archiveMethod/*, boolean overrideDefaultExcludes*/) {
         this.workspaceGlob = workspaceGlob.trim();
         this.workspaceExcludeGlob = Util.fixEmptyAndTrim(workspaceExcludeGlob);
         this.criteria = criteria;
         this.archiveMethod = archiveMethod;
-        this.overrideDefaultExcludes = overrideDefaultExcludes;
+        //this.overrideDefaultExcludes = overrideDefaultExcludes;
     }
 
     public BuildStepMonitor getRequiredMonitorService() {
@@ -174,7 +174,8 @@ public class CloneWorkspacePublisher extends Recorder {
                 }
                 // This means we found something.
                 if((includeMsg==null) && (excludeMsg==null)) {
-                    DirScanner globScanner = new DirScanner.Glob(realIncludeGlob, realExcludeGlob, !overrideDefaultExcludes);
+                    // Hudson doesn't have that constructor yet
+                    DirScanner globScanner = new DirScanner.Glob(realIncludeGlob, realExcludeGlob);
                     build.addAction(snapshot(build, ws, globScanner, listener, archiveMethod));
 
                     // Find the next most recent build meeting this criteria with an archived snapshot.
diff --git a/src/main/resources/hudson/plugins/cloneworkspace/CloneWorkspacePublisher/config.jelly b/src/main/resources/hudson/plugins/cloneworkspace/CloneWorkspacePublisher/config.jelly
index 60784fb..7ac69d4 100644
--- a/src/main/resources/hudson/plugins/cloneworkspace/CloneWorkspacePublisher/config.jelly
+++ b/src/main/resources/hudson/plugins/cloneworkspace/CloneWorkspacePublisher/config.jelly
@@ -42,7 +42,8 @@ THE SOFTWARE.
       <f:option value="ZIP" selected='${instance.archiveMethod=="ZIP"}'>${%Zipped}</f:option>
     </select>
   </f:entry>
-  <f:entry title="${%Override Default Ant Excludes}" field="overrideDefaultExcludes">
+  <!-- Hudson doesn't support this option -->
+  <!--f:entry title="${%Override Default Ant Excludes}" field="overrideDefaultExcludes">
     <f:checkbox />
-  </f:entry>
+  </f:entry-->
 </j:jelly>
diff --git a/src/main/webapp/archiveMethod.html b/src/main/webapp/archiveMethod.html
index 478b358..7f707ae 100644
--- a/src/main/webapp/archiveMethod.html
+++ b/src/main/webapp/archiveMethod.html
@@ -1,3 +1,3 @@
 <div>
-  <p>Set the archive method to specify what method the workspace is archived with. Zipping is the standard method performed by Jenkins, however prevents Unix permissions from being included. Ussing a gzipped tar file will properly perserve permissions.</p>
+  <p>Set the archive method to specify what method the workspace is archived with. Zipping is the standard method performed by Hudson, however prevents Unix permissions from being included. Ussing a gzipped tar file will properly perserve permissions.</p>
 </div>
diff --git a/src/test/java/hudson/plugins/cloneworkspace/CloneWorkspaceSCMTest.java b/src/test/java/hudson/plugins/cloneworkspace/CloneWorkspaceSCMTest.java
index aefb836..2c96f26 100644
--- a/src/test/java/hudson/plugins/cloneworkspace/CloneWorkspaceSCMTest.java
+++ b/src/test/java/hudson/plugins/cloneworkspace/CloneWorkspaceSCMTest.java
@@ -78,7 +78,7 @@ public class CloneWorkspaceSCMTest extends HudsonTestCase {
     }
 
     public void testGlobCloning() throws Exception {
-        FreeStyleProject parentJob = createCloneParentProject(new CloneWorkspacePublisher("moduleB/**/*", null, "Any", "ZIP", false));
+        FreeStyleProject parentJob = createCloneParentProject(new CloneWorkspacePublisher("moduleB/**/*", null, "Any", "ZIP"/*, false*/));
         
         buildAndAssertSuccess(parentJob);
 
@@ -133,7 +133,7 @@ public class CloneWorkspaceSCMTest extends HudsonTestCase {
     }
 
     public void testNotFailedParentCriteriaDoesNotArchiveFailure() throws Exception {
-        FreeStyleProject parentJob = createCloneParentProject(new CloneWorkspacePublisher("**/*", null, "Not Failed", "ZIP", false));
+        FreeStyleProject parentJob = createCloneParentProject(new CloneWorkspacePublisher("**/*", null, "Not Failed", "ZIP"/*, false*/));
 
         parentJob.getBuildersList().add(new FailureBuilder());
         
@@ -191,14 +191,16 @@ public class CloneWorkspaceSCMTest extends HudsonTestCase {
     }
     
     private FreeStyleProject createCloneParentProject() throws Exception {
-        return createCloneParentProject(new CloneWorkspacePublisher("**/*", null, "Any", "zip", false));
+        return createCloneParentProject(new CloneWorkspacePublisher("**/*", null, "Any", "zip"/*, false*/));
     }
     
     private FreeStyleProject createCloneParentProject(CloneWorkspacePublisher cwp) throws Exception {
         FreeStyleProject parentJob = createFreeStyleProject("parentJob");
         parentJob.setScm(new ExtractResourceWithChangesSCM(getClass().getResource("maven-multimod.zip"),
                                                            getClass().getResource("maven-multimod-changes.zip")));
-        parentJob.getPublishersList().add(cwp);
+        // Change for Hudson
+        //parentJob.getPublishersList().add(cwp);
+        parentJob.addPublisher(cwp);
 
         return parentJob;
     }
